version: 2.1

jobs:
  build-and-test:
    docker:
      - image: cimg/node:20.11
    steps:
      - checkout

      # Restaurar caché de dependencias
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-

      # Instalar dependencias
      - run:
          name: Instalar Dependencias
          command: npm ci

      # Guardar caché
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}

      # Ejecutar linter
      - run:
          name: Ejecutar Linter
          command: npm run lint || true

      # Build del proyecto
      - run:
          name: Build del Proyecto
          command: npm run build

      # Generar diff respecto a main
      - run:
          name: Generar Diff
          command: |
            git fetch origin main
            git diff origin/main > code_diff.txt

      # Enviar diff a Cline para QA estructurada en español
      - run:
          name: QA con Cline (JSON estructurado)
          command: |
            curl -s -X POST https://api.hicap.ai/v2/openai \
            -H "Content-Type: application/json" \
            -H "api-key: $CLINE_API_KEY" \
            -d '{
              "prompt": "Eres un asistente de QA de código. Analiza este diff y responde únicamente con un JSON con dos campos: \
              1) recommendations: una lista en español de sugerencias, observaciones o errores detectados. \
              2) status: \"approved\" si todo está correcto o \"rejected\" si hay errores graves. \
              No agregues texto fuera del JSON.\nDiff:\n'"$(cat code_diff.txt)"'"
            }' > cline_qa.json

      # Mostrar la salida completa para depuración
      - run:
          name: Mostrar resultado de Cline
          command: |
            echo "=== Resultado de Cline ==="
            cat cline_qa.json

      # Validar estado y fallar build si es rechazado
      - run:
          name: Validar QA
          command: |
            STATUS=$(jq -r '.status' cline_qa.json)
            echo "Estado de QA: $STATUS"
            if [ "$STATUS" = "rejected" ]; then
              echo "QA rechazado, build fallido."
              jq -r '.recommendations[]' cline_qa.json
              exit 1
            else
              echo "QA aprobado."
              jq -r '.recommendations[]' cline_qa.json
            fi

      # Guardar artefactos
      - store_artifacts:
          path: dist
          destination: build-output

      - persist_to_workspace:
          root: .
          paths:
            - dist

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test:
          filters:
            branches:
              only:
                - main
                - develop
